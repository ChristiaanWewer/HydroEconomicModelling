                                                                                                                                                                                                                                                                                                
import numpy       as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from pyfunctions.FLEXtopo import FLEXtopo
import pandas as pd
from pyfunctions.production_functions import *
mpl.use('Qt5Agg')


MODELNAME = 'Status Quo Scenario'

# fill in None for eta if you want to calculate the eta for this scenario and
# use that for the model
eta = None

# save location for data and plots generated by the model
save_loc = r'{}/output/{}'.format(os.path.dirname(os.getcwd()), MODELNAME)

# load data from file
forcing=np.genfromtxt(r'INPUT_DATA/IMD_1975_2013.txt',  dtype=float, autostrip=True)

# select last year of data
forcing2013 = forcing[13880:14245,]

# generating forcing data of fertilizer, kg/ha/year
Wstart = np.zeros((len(forcing2013), 1))
Wstart[1] = 100
Wstart[32] = 100
Wstart[60] = 200
Wstart[91] = 100
Wstart[121] = 100
Wstart[152] = 400
Wstart[244] = 100
Wstart[335] = 100

# 40% of fertilizer is uptaken by plants, and 60% enter unsaturated reservoir
# merge forcing data with the 
forcing2013 = np.hstack((forcing2013, Wstart * 0.6))

k = 0.01 # pollutant decay factor

# parameters for every bucket of the model
                        #         Imax  Ce      Sumax beta Pmax    Kf    k
ParPlateau =            np.array([2.06, 0.9902, 200,  1.5, 0.0849, 0.45, k ])   
ParHillslope_forest =   np.array([2.06, 0.9902, 300,  1.5, 0.8,    0.45, k ])
ParHillslope_crop =     np.array([2.06, 0.9902, 100,  1.5, 0.8,    0.45, k ])
ParWetland   =          np.array([2.06, 0.9902, 77,   1.5, 0.65,   0.45, k ])

# parameters for entire system: Ks      Tlag  frac    frac1  k     empty spots are respectivley for frac and frac1
ParCatchment =     np.array([0.0092, 2.46, 0.7,    0.5,     k]) 
# Note that frac and frac1 values will be replaced in the function 
# agriculture_production, therefore they have in the above array not a direct 
# influence on the functions from the production_functions.py file.

# landscape percentages taken from from A_landscapes.py
landscape_per=np.array([0.1427642041347405, 0.7267798704115026, 0.1304559254537569]) 

# get (modelled) hydrological data
Qm, Ea, Ctot = FLEXtopo(ParPlateau, ParHillslope_forest, ParHillslope_crop, 
                        ParWetland, ParCatchment, forcing2013, landscape_per)
Ep = forcing2013[:,2]
P = forcing2013[:,1]
Q = forcing2013[:,0]
xdata = np.arange(len(P))

# parameters for the crops:  coffee   arecanut coconut  pepper   banana   tea
start_irrigating = np.array([0       ,0       ,0       ,90      ,0       ,0     ])  # day irrigation starts
end_irrigating =   np.array([-1      ,-1      ,-1      ,214     ,-1      ,-1    ])  # day irrigation ends
compo =            np.array([0.58    ,0.1     ,0.09    ,0.09    ,0.08    ,0.07  ])  # composition of crops, -
Ky =               np.array([1       ,1.1     ,1       ,1.1     ,1.3     , 1.37 ])  # yield response factor, -
Yo =               np.array([6000    ,2800    ,16500   ,26000   ,100000  ,6000  ])  # optimum yield / irrigation yield, kg/ha
profit =           np.array([85      ,16      ,17      ,47      ,8       ,6     ])  # profit for crops, RS/kg
area_Plateau = 21725
area_Hillslope = 110597
area_Wetland = 19852

# turn parameters into dictionary object
extra_params   = {'compo': compo,
                  'Ky': Ky,
                  'Yo': Yo,
                  'profit': profit,
                  'start_irrigating': start_irrigating,
                  'end_irrigating': end_irrigating,
                  'area_Plateau': area_Plateau,
                  'area_Hillslope': area_Hillslope,
                  'area_Wetland': area_Wetland,
                  'landscape_per': landscape_per,
                  'ParPlateau': ParPlateau,
                  'ParHillslope_forest': ParHillslope_forest,
                  'ParHillslope_crop': ParHillslope_crop,
                  'ParWetland': ParWetland,
                  'SubParCatchment': ParCatchment,
                  'Forcing': forcing2013}

environmental_data_params = {'xdata': xdata,
                             'P': P,
                             'Ea': Ea,
                             'Ep': Ep,
                             'Q': Q,
                             'Qm': Qm,
                             'Ctot': Ctot,
                             'Wstart': Wstart,
                             'eta': eta}

# calculate points on PPF curve
frac_status_quo= 0.7
frac1_status_quo = 0.5

hydro_economic_analysis(environmental_data_params, frac_status_quo, frac1_status_quo, extra_params, MODELNAME, save_loc)
